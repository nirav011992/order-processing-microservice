version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: order-postgres
    environment:
      POSTGRES_DB: orders_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: order-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: order-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Producer API
  producer-api:
    build:
      context: .
      dockerfile: Dockerfile.producer
    container_name: order-producer-api
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_DATABASE: orders_db
      DATABASE_SSL_MODE: disable
      KAFKA_BROKERS: kafka:9092
      KAFKA_GROUP_ID: order-processing-group
      KAFKA_ORDER_TOPIC: order-events
      LOGGER_LEVEL: info
      LOGGER_FORMAT: json
    restart: unless-stopped

  # Order Consumer
  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    container_name: order-consumer
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_DATABASE: orders_db
      DATABASE_SSL_MODE: disable
      KAFKA_BROKERS: kafka:9092
      KAFKA_GROUP_ID: order-processing-group
      KAFKA_ORDER_TOPIC: order-events
      LOGGER_LEVEL: info
      LOGGER_FORMAT: json
    restart: unless-stopped

  # Status API
  status-api:
    build:
      context: .
      dockerfile: Dockerfile.status
    container_name: order-status-api
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "9080:9080"
    environment:
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 9080
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_DATABASE: orders_db
      DATABASE_SSL_MODE: disable
      KAFKA_BROKERS: kafka:9092
      KAFKA_GROUP_ID: order-processing-group
      KAFKA_ORDER_TOPIC: order-events
      LOGGER_LEVEL: info
      LOGGER_FORMAT: json
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  default:
    name: order-processing-network